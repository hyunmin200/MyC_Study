변수의 주소값은
00000001 00000002 00000003 이런 식으로 이루어져 있고
1씩 늘어난다
만약 c라는 4바이트 변수가 있다면
00000001 00000002 00000003 00000004 까지를 가지고 있는 것이다.
&연산자로 주소값을 불러낸다면 첫번째 값 즉 00000001이 반환이 된다.

그래서 나중에 다른 사람이 물어보았을 때
첫번째 주소값을 말해야지 굳이 다 말할 필요는 없는 것이다.

그래서 이러한 정수 형태의 주소 값을 저장하는목적으로 선언되는 것이 포인터 변수이다.

&연산자 맞보기

int main(void)
{
	int num = 7;
	int * pnum;
	pnum = &num;
}
이러면 포인터 변수에 주소값을 넣어 줄 수 있음

주소값은 컴퓨터가 몇 비트 시스템인지에 따라 크기가 다르다
64비트면 8바이트
32비트면 4바이트
그래서 64비트 시스템이라면 포인터로 int형 4바이트 변수의 주소값을 받는다고 하더라도
포인터에는 8바이트가 쓰이게 된다.
이것을 역전현상(?)이라고 한다.

int * ptr;
int* ptr;
int *ptr;
